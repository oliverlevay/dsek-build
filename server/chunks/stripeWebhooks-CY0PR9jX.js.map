{"version":3,"file":"stripeWebhooks-CY0PR9jX.js","sources":["../../../.svelte-kit/adapter-node/chunks/stripeWebhooks.js"],"sourcesContent":["import Stripe from \"stripe\";\nimport { a as authorizedPrismaClient } from \"./authorizedPrisma.js\";\nimport { s as sendNotification } from \"./index3.js\";\nimport { N as NotificationType } from \"./types3.js\";\nimport { t as tickets_errors_couldNotRefund, k as tickets_purchase_errors_existingPaymentIsOngoing } from \"./messages.js\";\nimport { d as private_env } from \"./shared-server.js\";\nconst stripe = new Stripe(private_env.SECRET_STRIPE_KEY);\nconst createPaymentIntent = ({ idempotencyKey, ...params }) => {\n  return stripe.paymentIntents.create(\n    {\n      currency: \"SEK\",\n      automatic_payment_methods: {\n        enabled: true\n      },\n      description: \"D-sek webshop purchase\",\n      ...params\n    },\n    {\n      idempotencyKey\n    }\n  );\n};\nconst updatePaymentIntent = (id, params) => {\n  return stripe.paymentIntents.update(id, {\n    currency: \"SEK\",\n    description: \"D-sek webshop purchase\",\n    ...params\n  });\n};\nconst creteConsumableMetadata = (consumables) => {\n  return {\n    consumableIds: consumables.map((c) => c.id).join(\", \"),\n    consumableNames: consumables.map((c) => c.shoppable.title).join(\", \"),\n    consumableCount: consumables.length\n  };\n};\nconst getPaymentIntent = (intentId, params) => {\n  return stripe.paymentIntents.retrieve(intentId, params);\n};\nconst resetConsumablesForIntent = async (intentId) => {\n  await authorizedPrismaClient.consumable.updateMany({\n    where: {\n      stripeIntentId: intentId,\n      purchasedAt: null\n    },\n    data: {\n      stripeIntentId: null,\n      priceAtPurchase: null\n    }\n  });\n};\nconst removePaymentIntent = async (intentId) => {\n  await stripe.paymentIntents.cancel(intentId);\n  await resetConsumablesForIntent(intentId);\n};\nconst ensurePaymentIntentState = async (intentId) => {\n  const intent = await getPaymentIntent(intentId);\n  let canRetryPayment = false;\n  switch (intent.status) {\n    case \"succeeded\":\n      await onPaymentSuccess(intent);\n      break;\n    case \"requires_payment_method\":\n      canRetryPayment = true;\n      break;\n    case \"requires_action\":\n      canRetryPayment = true;\n      break;\n    case \"requires_capture\":\n      canRetryPayment = true;\n      break;\n    case \"requires_confirmation\":\n      canRetryPayment = true;\n      break;\n    case \"processing\":\n      await onPaymentProcessing(intent);\n      throw new Error(tickets_purchase_errors_existingPaymentIsOngoing());\n    case \"canceled\":\n      await onPaymentCancellation(intent);\n      break;\n    default:\n      await removePaymentIntent(intent.id);\n      break;\n  }\n  return [intent, canRetryPayment];\n};\nconst refundConsumable = async (stripeIntentId, amount) => {\n  try {\n    const intent = await getPaymentIntent(stripeIntentId, {\n      expand: [\"latest_charge\"]\n    });\n    if (intent.status !== \"succeeded\") return;\n    if (intent.latest_charge?.refunded) return;\n    const refund = await stripe.refunds.create({\n      amount: Math.min(intent.amount_received, amount),\n      payment_intent: stripeIntentId\n    });\n    return refund;\n  } catch (e) {\n    if (e instanceof Error) {\n      throw new Error(`${tickets_errors_couldNotRefund()}: ${e}`);\n    }\n    throw new Error(tickets_errors_couldNotRefund());\n  }\n};\nconst onPaymentSuccess = async (intent) => {\n  const purchasedConsumables = await authorizedPrismaClient.$transaction(\n    async (tx) => {\n      let relevantConsumables = await tx.consumable.findMany({\n        where: {\n          stripeIntentId: intent.id\n        },\n        include: {\n          shoppable: true\n        }\n      });\n      if (relevantConsumables.length === 0) {\n        relevantConsumables = await tryToSavePaymentIntent(intent, tx);\n      }\n      if (relevantConsumables.every(\n        (consumable) => consumable.purchasedAt !== null\n      )) {\n        console.warn(\n          \"Tried to mark consumables as purchased, but they were already marked as purchased\"\n        );\n        return [];\n      } else {\n        if (relevantConsumables.some(\n          (consumable) => consumable.purchasedAt !== null\n        )) {\n          console.warn(\n            `some consumables for intent id was already marked as purchased. Intent id: ${intent.id}`\n          );\n        }\n        await tx.consumable.updateMany({\n          where: {\n            stripeIntentId: intent.id,\n            purchasedAt: null\n          },\n          data: {\n            purchasedAt: /* @__PURE__ */ new Date()\n          }\n        });\n      }\n      return relevantConsumables.filter(\n        (consumable) => consumable.purchasedAt === null\n        // filter on items which were not already bought\n      );\n    }\n  );\n  if (purchasedConsumables.length === 0) {\n    return;\n  }\n  try {\n    await sendNotification({\n      title: purchasedConsumables.length === 1 ? `${purchasedConsumables[0]?.shoppable.title} har köpts` : `${purchasedConsumables.length} produkter har köpts`,\n      message: `Ditt köp på ${intent.amount / 100} ${intent.currency?.toUpperCase() ?? \"SEK\"} har gått igenom`,\n      type: NotificationType.PAYMENT_STATUS,\n      link: \"/shop/inventory\",\n      // From a pure type perspective, there is a risk of this array being multiple memberIds, meaning they might both get \"you have purchased 2 items\" but only purchased one each\n      // But in reality, there is no way for two different people to have the same purchase intent, so it should always be a array of 1 items (or 0, if purchased anonymously)\n      memberIds: purchasedConsumables.map((consumable) => consumable.memberId).filter(Boolean)\n    });\n  } catch (e) {\n    throw new Error(\n      `Could not send notifications: ${e instanceof Error ? e.message : e}`\n    );\n  }\n};\nconst tryToSavePaymentIntent = async (intent, tx) => {\n  const consumableIds = intent.metadata?.[\"consumableIds\"]?.split(\", \");\n  if (!consumableIds) {\n    console.error(\n      `No consumables found for intent ${intent.id}. Metadata was corrupt. Metadata: ${intent.metadata}`\n    );\n    throw new Error(\"No consumables found for intent\");\n  }\n  const relevantConsumables = await tx.consumable.findMany({\n    where: {\n      id: {\n        in: consumableIds\n      },\n      purchasedAt: null\n    },\n    include: {\n      shoppable: true\n    }\n  });\n  if (relevantConsumables.length === 0) {\n    console.error(\n      `No consumables found for intent ${intent.id}. Not found in db.`\n    );\n    throw new Error(\"No consumables found for intent\");\n  }\n  await tx.consumable.updateMany({\n    where: {\n      id: {\n        in: consumableIds\n      }\n    },\n    data: {\n      stripeIntentId: intent.id\n    }\n  });\n  return relevantConsumables;\n};\nconst onPaymentFailure = async (intent) => {\n  const failedConsumables = await authorizedPrismaClient.$transaction(\n    async (tx) => {\n      const relevantConsumables = await tx.consumable.findMany({\n        where: {\n          stripeIntentId: intent.id\n        },\n        include: {\n          shoppable: true\n        }\n      });\n      if (relevantConsumables.length === 0) {\n        console.error(`No consumables found for intent ${intent.id}`);\n        throw new Error(\"No consumables found for intent\");\n      }\n      await tx.consumable.updateMany({\n        where: {\n          stripeIntentId: intent.id\n        },\n        data: {\n          stripeIntentId: null,\n          // remove the intent id\n          purchasedAt: null,\n          // make sure the consumable is not marked as purchased\n          priceAtPurchase: null\n        }\n      });\n      return relevantConsumables;\n    }\n  );\n  try {\n    await sendNotification({\n      title: \"Ditt köp har misslyckats\",\n      message: `Ditt köp på ${intent.amount / 100} ${intent.currency?.toUpperCase() ?? \"SEK\"} har misslyckats. Anledning: ${intent.last_payment_error?.message}`,\n      type: NotificationType.PAYMENT_STATUS,\n      link: \"/shop/cart\",\n      // From a pure type perspective, there is a risk of this array being multiple memberIds, meaning they might both get \"you have purchased 2 items\" but only purchased one each\n      // But in reality, there is no way for two different people to have the same purchase intent, so it should always be a array of 1 items (or 0, if purchased anonymously)\n      memberIds: failedConsumables.map((consumable) => consumable.memberId).filter(Boolean)\n    });\n  } catch (e) {\n    throw new Error(\n      `Could not send notifications: ${e instanceof Error ? e.message : e}`\n    );\n  }\n};\nconst onPaymentCancellation = async (intent) => {\n  await resetConsumablesForIntent(intent.id);\n};\nconst onPaymentProcessing = (intent) => {\n  console.log(`Payment Intent ${intent.id} is processing`);\n};\nexport {\n  onPaymentFailure as a,\n  onPaymentProcessing as b,\n  onPaymentSuccess as c,\n  creteConsumableMetadata as d,\n  ensurePaymentIntentState as e,\n  createPaymentIntent as f,\n  refundConsumable as g,\n  onPaymentCancellation as o,\n  removePaymentIntent as r,\n  stripe as s,\n  updatePaymentIntent as u\n};\n"],"names":[],"mappings":"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"}